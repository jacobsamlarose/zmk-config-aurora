/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/led/led.h>

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4
// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer


&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <37>; /* arbitrary; change at will */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

    &caps_word {
        continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>;
    };

/ {

    macros {
        ZMK_MACRO(combo_the,
        	wait-ms = <30>;
        	tap-ms = <40>;
        	bindings = <&kp T &kp H &kp E>;
    	)
	
	ZMK_MACRO(combo_and,
        	wait-ms = <30>;
        	tap-ms = <40>;
        	bindings = <&kp A &kp N &kp D>;
    	)
	
	ZMK_MACRO(combo_you,
        	wait-ms = <30>;
        	tap-ms = <40>;
        	bindings = <&kp Y &kp O &kp U>;
    	)
    };

    combos {
         compatible = "zmk,combos";

         // after https://github.com/bcat/zmk-config/commit/0f0b57ff233a56345426d3139d3d26906ecd7f18
         combo_unlock {
           timeout-ms = <2000>;
           key-positions = <0 11 24 35>;
           bindings = <&tog 4>;
         };
	 
	 combo_showkb {
           timeout-ms = <2000>;
           key-positions = <12 37>;
           bindings = <&kp C_EJECT>;
         };
	 	 
		 combo_equals_l {
           timeout-ms = <2000>;
           key-positions = <24 29>;
		   layers = <1>;
           bindings = <&kp KP_EQUAL>;
         };
     
     	 combo_equals_r {
           timeout-ms = <2000>;
           key-positions = <35 29>;
           layers = <1>;
           bindings = <&kp KP_EQUAL>;
         };
         
         combo_tog1 {
           timeout-ms = <500>;
           key-positions = <39 41>;
           bindings = <&tog 1>;
         };
         
         combo_tog2 {
           timeout-ms = <500>;
           key-positions = <39 40>;
           bindings = <&tog 1>;
         };
         
         combo_tog3 {
           timeout-ms = <800>;
           key-positions = <39 40 41>;
           bindings = <&tog 3>;
         };
         
         combo_hyper {
           timeout-ms = <800>;
           key-positions = <19 20 21>;
           bindings = <&sk LG(LS(LA(LCTRL)))>;
         };
		
		 combo_lpar {
           timeout-ms = <800>;
           key-positions = <4 5>;
           bindings = <&kp LPAR>;
         };
		
	     combo_rpar {
           timeout-ms = <800>;
           key-positions = <6 7>;
           bindings = <&kp RPAR>;
         };
		
	     combo_del {
           timeout-ms = <800>;
           key-positions = <10 11>;
           bindings = <&kp DEL>;
         };
		
		combo_lbkt {
           timeout-ms = <800>;
           key-positions = <16 17>;
           bindings = <&kp LBKT>;
         };
		
	     combo_rbkt {
           timeout-ms = <800>;
           key-positions = <18 19>;
           bindings = <&kp RBKT>;
         };
		
		combo_lbrc {
           timeout-ms = <800>;
           key-positions = <28 29>;
           bindings = <&kp LBRC>;
         };
		
	     combo_rbrc {
           timeout-ms = <800>;
           key-positions = <30 31>;
           bindings = <&kp RBRC>;
         };
     };
     
     behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };
	
       // guihyp: gui_hyper {
       //     compatible = "zmk,behavior-tap-dance";
       //     label = "GUI_HYPER";
       //     #binding-cells = <0>;
       //     tapping-term-ms = <500>;
       //     bindings = <&kp LGUI>, <&sk LG(LS(LA(LCTRL)))>;
       // };
	
	// mo_tog: behavior_mo_tog {
    //        compatible = "zmk,behavior-hold-tap";
    //        label = "mo_tog";
    //        #binding-cells = <2>;
    //        flavor = "hold-preferred";
    //        tapping-term-ms = <200>;
    //        bindings = <&mo>, <&tog>;
    //    };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R       |    T     |   |  Y  |  U   |  I  |  O  |  P  | BKSP      |
// | CAPS |  A  |  S  |  D  |  F       |    G     |   |  H  |  J   |  K  |  L  |  ;  |  '        |
// | SHFT |  Z  |  X  |  C  |  V       |    B     |   |  N  |  M   |  ,  |  .  |  /  | SHFT/CAPW |
//                    | ALT | CMD(HYP) | CTL(ENT) |   | SPC | FN2  | FN1 |
                        bindings = <
   &kp TAB     &kp Q    &kp W    &kp E       &kp R      &kp T          &kp Y       &kp U    &kp I       &kp O    &kp P     &kp BSPC
   &kp CAPS    &kp A    &kp S    &kp D       &kp F      &kp G          &kp H       &kp J    &kp K       &kp L    &kp SEMI  &kp SQT
   &kp LSHFT   &kp Z    &kp X    &kp C       &kp V      &kp B          &kp N       &kp M    &kp COMMA   &kp DOT  &kp FSLH  &td0
                                 &kp LALT    &kp LGUI   &mt LCTRL RET  &kp SPACE   &mo 2    &mo 1
                        >;
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |   TAB |  1  |  2  |  3  |  4  |    5     |   |  6  |  7  |  8   |   9  |   0   | BKSP      |
// | EJECT |  4  |  5  |  6  |  `  |    -     |   |     |     |      |  UP  |   \   |   `       |
// |  SHFT |  7  |  8  |  9  |  0  |    =     |   |     |     | LEFT | DOWN | RIGHT | SHFT/CAPW |
//                     | ALT | CMD | CTL(ENT) |   | SPC | FN3 |  FN1 |
                        bindings = <
   &trans      &kp N1   &kp N2   &kp N3   &kp N4      &kp N5         &kp N6   &kp N7   &kp N8      &kp N9      &kp N0      &kp BSPC
   &kp C_EJECT &kp N4   &kp N5   &kp N6   &kp SEMI    &kp MINUS      &none    &none    &none       &kp UP      &kp BSLH    &kp GRAVE
   &trans      &kp N7   &kp N8   &kp N9   &kp N0      &kp PLUS       &none    &none    &kp LEFT    &kp DOWN    &kp RIGHT   &trans
                                 &trans   &trans      &mt LCTRL RET  &trans   &mo 3    &trans
                        >;
                };

                combo_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  7   |  8   |  9    |        |         |   |  F1   |  F2   |  F3   | ( | ) | DEL    |
// | TOG1 |  4   |  5   |  6    |        |         |   |  F4   |  F5   |  F6   | [ | ] |        | 
// |  .   |  1   |  2   |  3    |  0     |         |   |  F7   |  F8   |  F9   | { | } | TOG1   |
//                      | HYPER |  MEH   | MYKEYB  |   | SPACE | FN2   | FN1   |
                        bindings = <
   &kp ESC     &none  	   &none   &none   &none    &combo_the    &none  &none   &none   &none    &none    &none
   &none       &combo_and  &none   &none   &none    &none         &none  &none   &none   &none    &none    &none
   &kp KP_DOT  &none  	   &none   &none   &none    &none         &none  &none   &none   &none    &none    &none
			&kp LS(LC(LA(LGUI)))   &kp LC(LS(LALT)) &kp C_EJECT   &trans  &trans   &mo 3
                        >;
                };
		
		board_layer {
// -----------------------------------------------------------------------------------------
// | ESC     | PRVS  | RWND  | PLAY  	| MFFD    | NEXT    |   | BT1     | BT2   | BT3   | BT4   | BT5   | BT_CLR  |
// | RGB_TOG | BRI + | HUE + | SAT + 	| EFF +   | VOL+    |   |         |       |       |       |       | OUT_TOG |
// |         | BRI - | HUE - | SAT - 	| EFF -   | VOL-    |   |   	  |       |       |       |       |         |
//                           | PWR_OFF  | PWR_OFF | PWR_TOG	| 	| 		  |       |       |
                        bindings = <
   &kp ESC          &kp C_PREV       &kp C_RW         &kp C_PP          &kp C_FF		&kp C_NEXT		&bt BT0        &bt BT1  &bt BT2   &bt BT3   &bt BT4	 &bt BT_CLR 
   &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI   &rgb_ug RGB_EFF		&kp C_VOL_UP		&kp F1         &kp F2   &kp F3    &kp F4    &kp F5	 &kp F6	 
   &none            &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD   &rgb_ug RGB_EFR		&kp C_VOL_DN		&kp F7         &kp F8   &kp F9    &kp F10   &kp F11	 &kp F12	 
                                                      &ext_power EP_OFF &ext_power EP_ON	&ext_power EP_TOG  	&out OUT_TOG   &trans   &trans
                        >;
                };
		
		travel_layer {
// -----------------------------------------------------------------------------------------
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
// |       |       |       |       |       |         |   |         |       |       |       |       |        |
//                         |       |       | SUSPEND |   | SUSPEND |       |       |
                        bindings = <
   &none       &none    &none    &none    &none    &none        &none      &none   &none   &none     &none     &none 
   &none       &none    &none    &none    &none    &none        &none      &none   &none   &none     &none     &none 
   &none       &none    &none    &none    &none    &none     	&none      &none   &none   &none     &none     &none 
                                 &none    &none    &suspend     &suspend   &none   &none
                        >;
                };
        };
};
